{"version":3,"sources":["scripts/index.js"],"names":["inventors","first","last","year","passed","people","inventorsFilter","filter","item","console","log","inventorsNames","map","arr","sort","a","b","sortedBirthday","sumAllYears","reduce","previousVal","currVal","yearsLive","sortByYearsLived","aYearsLive","bYearsLive","newPeople","data","testObj","key","fifteen","hasOwnProperty","newData","obj"],"mappings":"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","file":"scripts.bcf3243b.js","sourceRoot":"..","sourcesContent":["// Get your shorts on - this is an array workout!\n// ## Array Cardio Day 1\n\n// Some data we can work with\n\nconst inventors = [\n    { first: 'Albert', last: 'Einstein', year: 1879, passed: 1955 },\n    { first: 'Isaac', last: 'Newton', year: 1643, passed: 1727 },\n    { first: 'Galileo', last: 'Galilei', year: 1564, passed: 1642 },\n    { first: 'Marie', last: 'Curie', year: 1867, passed: 1934 },\n    { first: 'Johannes', last: 'Kepler', year: 1571, passed: 1630 },\n    { first: 'Nicolaus', last: 'Copernicus', year: 1473, passed: 1543 },\n    { first: 'Max', last: 'Planck', year: 1858, passed: 1947 },\n    { first: 'Katherine', last: 'Blodgett', year: 1898, passed: 1979 },\n    { first: 'Ada', last: 'Lovelace', year: 1815, passed: 1852 },\n    { first: 'Sarah E.', last: 'Goode', year: 1855, passed: 1905 },\n    { first: 'Lise', last: 'Meitner', year: 1878, passed: 1968 },\n    { first: 'Hanna', last: 'Hammarström', year: 1829, passed: 1909 }\n];\n\nconst people = ['Beck, Glenn', 'Becker, Carl', 'Beckett, Samuel', 'Beddoes, Mick', 'Beecher, Henry', 'Beethoven, Ludwig', 'Begin, Menachem', 'Belloc, Hilaire', 'Bellow, Saul', 'Benchley, Robert', 'Benenson, Peter', 'Ben-Gurion, David', 'Benjamin, Walter', 'Benn, Tony', 'Bennington, Chester', 'Benson, Leana', 'Bent, Silas', 'Bentsen, Lloyd', 'Berger, Ric', 'Bergman, Ingmar', 'Berio, Luciano', 'Berle, Milton', 'Berlin, Irving', 'Berne, Eric', 'Bernhard, Sandra', 'Berra, Yogi', 'Berry, Halle', 'Berry, Wendell', 'Bethea, Erin', 'Bevan, Aneurin', 'Bevel, Ken', 'Biden, Joseph', 'Bierce, Ambrose', 'Biko, Steve', 'Billings, Josh', 'Biondo, Frank', 'Birrell, Augustine', 'Black, Elk', 'Blair, Robert', 'Blair, Tony', 'Blake, William'];\n\n// Array.prototype.filter()\n// 1. Filter the list of inventors for those who were born in the 1500's\nconst inventorsFilter = inventors.filter(item => item['year'] > 1500 && item['year'] < 1600);\nconsole.log(inventorsFilter);\n\n// Array.prototype.map()\n// 2. Give us an array of the inventors first and last names\n// метод .map всегда возвращает столько элементов в новый массив, сколько получил на вход\n\nconst inventorsNames = inventors.map((item) => {\n    return {\n        first: item['first'],\n        last: item['last'],\n    }\n});\n/* не разобрался, почему не работает this\nTODO: */\nconsole.log(inventorsNames);\n// Array.prototype.sort()\n// 3. Sort the inventors by birthdate, oldest to youngest\n\n// сортировка\nconst arr = [1, 3, 5, -1, 10, 44];\n\nconsole.log(arr.sort((a, b) => a - b));\n\nlet sortedBirthday = inventors.sort((a, b) => {\n    if (a.year < b.year) return -1;\n    else if (a.year > b.year) return 1;\n    return 0;\n\n});\n\nconsole.log(sortedBirthday);\n// Array.prototype.reduce()\n// 4. How many years did all the inventors live all together?\nlet sumAllYears = inventors.reduce((previousVal, currVal) => {\n    let yearsLive = currVal.passed - currVal.year;\n    console.log(currVal['first'] + ' ' + currVal['last'] + ' прожил: ' + yearsLive);\n    return previousVal += currVal.passed - currVal.year;\n}, 0);\n\nconsole.log(sumAllYears);\n\n// 5. Sort the inventors by years lived\n\nlet sortByYearsLived = inventors.sort((a, b) => {\n    let aYearsLive = a.passed - a.year;\n    let bYearsLive = b.passed - b.year;\n    console.log('a: ' + aYearsLive + '\\n' + 'b: ' + bYearsLive);\n    if (aYearsLive < bYearsLive) {\n        return -1;\n    }\n    else if (aYearsLive > bYearsLive) {\n        return 1;\n    }\n    return 0;\n});\n\nconsole.log(sortByYearsLived);\n// 6. create a list of Boulevards in Paris that contain 'de' anywhere in the name\n// https://en.wikipedia.org/wiki/Category:Boulevards_in_Paris\n\n\n// 7. sort Exercise\n// Sort the people alphabetically by last name\nlet newPeople = people.sort();\nconsole.log(newPeople);\n// 8. Reduce Exercise\n// Sum up the instances of each of these\nconst data = ['car', 'car', 'truck', 'truck', 'bike', 'walk', 'car', 'van', 'bike', 'walk', 'car', 'van', 'car', 'truck'];\n\n\nconst testObj = {\n    key: 15,\n};\n\nconst fifteen = 15;\n\nconsole.log(testObj.hasOwnProperty('key'));\n\n\nlet newData = data.reduce(function (obj, item) {\n    if( !obj[item]){\n        obj[item] = 0;\n    }\n    obj[item]++;\n    return obj;\n}, {});\nconsole.log((newData));"]}