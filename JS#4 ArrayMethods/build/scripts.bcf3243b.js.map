{"version":3,"sources":["scripts/index.js"],"names":["inventors","first","last","year","passed","people","arr","i","length","fiveHundredths","forEach","inventor","push","fiveHundredths1","filter","console","log","mapWithInventors","map","sortInventors","sort","a","b","preVal","reduceInventors","reduce","prevValue","sortInventors11","yearsArr","data","newData","newObj","item"],"mappings":"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","file":"scripts.bcf3243b.js","sourceRoot":"..","sourcesContent":["// Get your shorts on - this is an array workout!\r\n// ## Array Cardio Day 1\r\n\r\n// Some data we can work with\r\n\r\nconst inventors = [{\r\n        first: 'Albert',\r\n        last: 'Einstein',\r\n        year: 1879,\r\n        passed: 1955\r\n    },\r\n    {\r\n        first: 'Isaac',\r\n        last: 'Newton',\r\n        year: 1643,\r\n        passed: 1727\r\n    },\r\n    {\r\n        first: 'Galileo',\r\n        last: 'Galilei',\r\n        year: 1564,\r\n        passed: 1642\r\n    },\r\n    {\r\n        first: 'Marie',\r\n        last: 'Curie',\r\n        year: 1867,\r\n        passed: 1934\r\n    },\r\n    {\r\n        first: 'Johannes',\r\n        last: 'Kepler',\r\n        year: 1571,\r\n        passed: 1630\r\n    },\r\n    {\r\n        first: 'Nicolaus',\r\n        last: 'Copernicus',\r\n        year: 1473,\r\n        passed: 1543\r\n    },\r\n    {\r\n        first: 'Max',\r\n        last: 'Planck',\r\n        year: 1858,\r\n        passed: 1947\r\n    },\r\n    {\r\n        first: 'Katherine',\r\n        last: 'Blodgett',\r\n        year: 1898,\r\n        passed: 1979\r\n    },\r\n    {\r\n        first: 'Ada',\r\n        last: 'Lovelace',\r\n        year: 1815,\r\n        passed: 1852\r\n    },\r\n    {\r\n        first: 'Sarah E.',\r\n        last: 'Goode',\r\n        year: 1855,\r\n        passed: 1905\r\n    },\r\n    {\r\n        first: 'Lise',\r\n        last: 'Meitner',\r\n        year: 1878,\r\n        passed: 1968\r\n    },\r\n    {\r\n        first: 'Hanna',\r\n        last: 'Hammarström',\r\n        year: 1829,\r\n        passed: 1909\r\n    }\r\n];\r\n\r\nconst people = ['Beck, Glenn', 'Becker, Carl', 'Beckett, Samuel', 'Beddoes, Mick', 'Beecher, Henry', 'Beethoven, Ludwig', 'Begin, Menachem', 'Belloc, Hilaire', 'Bellow, Saul', 'Benchley, Robert', 'Benenson, Peter', 'Ben-Gurion, David', 'Benjamin, Walter', 'Benn, Tony', 'Bennington, Chester', 'Benson, Leana', 'Bent, Silas', 'Bentsen, Lloyd', 'Berger, Ric', 'Bergman, Ingmar', 'Berio, Luciano', 'Berle, Milton', 'Berlin, Irving', 'Berne, Eric', 'Bernhard, Sandra', 'Berra, Yogi', 'Berry, Halle', 'Berry, Wendell', 'Bethea, Erin', 'Bevan, Aneurin', 'Bevel, Ken', 'Biden, Joseph', 'Bierce, Ambrose', 'Biko, Steve', 'Billings, Josh', 'Biondo, Frank', 'Birrell, Augustine', 'Black, Elk', 'Blair, Robert', 'Blair, Tony', 'Blake, William'];\r\n\r\n// Array.prototype.filter()\r\n// 1. Filter the list of inventors for those who were born in the 1500's\r\nconst arr = [];\r\n\r\nfor(let i=0; i < arr.length; i++);\r\nconst fiveHundredths = inventors.forEach(function(inventor) {\r\n    if(inventor.year > 1499 || inventor.year < 1599 ) {\r\n        arr.push(inventor.first + ' ' + inventor.last);\r\n    }\r\n});\r\n\r\nconst fiveHundredths1 = inventors.filter()\r\n\r\n\r\n\r\nconsole.log(arr);\r\n// Array.prototype.map()\r\n// 2. Give us an array of the inventors first and last names\r\n// метод .map всегда возвращает столько элементов в новый массив, сколько получил на вход\r\n// здесь мы возвращаем массив, в котором каждый объект содержим имя и фамилию\r\nconst mapWithInventors = inventors.map(inventor => `${inventor.first} ${inventor.last}`);\r\n\r\nconsole.log(mapWithInventors);\r\n\r\n// Array.prototype.sort()\r\n// 3. Sort the inventors by birthdate, oldest to youngest\r\nconst sortInventors = inventors.sort( (a, b) => b.year - a.year);\r\nconsole.log(sortInventors);\r\n\r\n// сортировка\r\n\r\n// Array.prototype.reduce()\r\n// 4. How many years did all the inventors live all together?\r\n\r\nlet preVal = 0;\r\n\r\nfor(let i=0; i < inventors.length; i++){\r\n    preVal = inventors[i].passed - inventors[i].year;\r\n}\r\n\r\nconsole.log(preVal);\r\nconst reduceInventors = inventors.reduce( (prevValue, inventor) => {\r\n    return prevValue + (inventor.passed - inventor.year);\r\n}, 0);\r\n\r\nconsole.log(reduceInventors);\r\n\r\n\r\n// 5. Sort the inventors by years lived\r\n\r\nconst sortInventors11 = inventors.reduce((yearsArr, inventor) => {\r\n    yearsArr.push(inventor.passed - inventor.year);\r\n    return yearsArr.sort((a, b) => a > b ? 1: -1);\r\n}, []);\r\n\r\nconsole.log(sortInventors11);\r\n// можно не делать\r\n// 6. create a list of Boulevards in Paris that contain 'de' anywhere in the name\r\n// https://en.wikipedia.org/wiki/Category:Boulevards_in_Paris\r\n\r\n\r\n// 7. sort Exercise\r\n// Sort the people alphabetically by last name\r\n\r\n// 8. Reduce Exercise\r\n// Sum up the instances of each of these\r\nconst data = ['car', 'car', 'truck', 'truck', 'bike', 'walk', 'car', 'van', 'bike', 'walk', 'car', 'van', 'car', 'truck'];\r\n\r\nconst newData = data.reduce((newObj, item) =>{\r\n    if(newObj[item] == null){\r\n        newObj[item] = 1;\r\n    }\r\n    else{\r\n        newObj[item] += 1;\r\n    }\r\n    return newObj;\r\n}, {});\r\n\r\n\r\nconsole.log(newData);"]}